INSTALAÇÃO E CRIAÇÃO DO PROJETO NODE
    Verificar versão do Node e NPM(gerenciador de pacotes do node)
        node -v 
        npm -v 

    Criar tudo que precisa e instalar as dependências necessárias para o react funcionar
        npx create-react-app platzi-curso-react

    Entrar na pasta que foi criada
    Deletar os arquivos listados:
        App.css
        App.js
        App.test.js
        index.css
        logo.svg
        serviceWorker.js

ELEMENTO
    Criar um elemento no React:
        São três os parametros necessários: Tipo de elemento que você vai criar, propriedades desse elemento (objeto), conteudo do elemento.
        Primeiro você cria, depois você renderiza seus componentes.
            const elemento = React.createElement(
                "div", 
                {}, 
                "Olá"
            );
            ReactDOM.render(
                elemento, 
                document.getElementById('root')
            );
        Outra forma(mais utilizada) de criar um componente:
            const elementoComJSX = (
            <div className="platzi" autoCorrect>
                <h1> Olá, estamos utilizando o JSX agora!</h1>
            </div>
            );

Executar aplicação React:
    npm start

COMPONETES 
    Componentes é uma função que retorna um elemento. (É importante que sempre tenha a primeira letra maiuscula)
        //Componente funcional
const Oi = (props) => (
    <h1>Olá, {props.nome}</h1>
);

//componente de classe (Todo componente de classe tem que ter a função render() para devolver alguma coisa)
class Tchau extends React.Component{
    render(){
    return <h3>Tchau {this.props.nome}</h3>
    }
}

const nome = "Rose";
const nome2 = "Maria";
const nome3 = "Victor";

ReactDOM.render(
    <div>
        <Oi nome={nome}/>
        <Tchau nome={nome}/>
        <Oi nome={nome2}/>
        <Tchau nome={nome2}/>
        <Oi nome={nome3}/>
        <Tchau nome={nome3}/>
    </div>,
    document.getElementById('root')
);

BICLIOTECAS PARA ESTILIZAR COMPONETES
    https://github.com/MicheleBertoli/css-in-js
    Mais utilizadas são: style-components e emotion.
    //É criado um objeto style dentro do próprio componente
        const Oi = (props) => (
            <h1 style={{
                backgroundColor: "pink"
            }}>Olá, {props.nome}</h1>
        );

    //Pode ser por um arquivo externo .css utilizando a classe
        class Tchau extends React.Component{
            render(){
            return <h3 className="platzi">Tchau {this.props.nome}</h3>
            }
        }
