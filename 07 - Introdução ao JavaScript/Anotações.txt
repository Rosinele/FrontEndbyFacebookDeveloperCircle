TIPOS DE DADOS: BOOLEAN, NUMBER, UNDEFINED E NULL, OBJECT.

	O JavaScript tem 7 tipos de dados, 6 deles são primitivos(Sem propriedades) e tem o object.
		- Boolean 
		- Number 
		- String (Pode ser escrita entre 'aspas simples', ´aspas´ e `backticks`)
			Interpolação de string permite colocar uma variavel dentro do backticks
				var teste = 1;
				console.log(typeof `backticks ${teste}`);
		- Undefined (Quando não há atribuição de valores).
		- Null (Tem valor atribuído, mas esse valor é vazio).
		- Symbol (Utilizado para fazer algumas operações em objetos).
		- Object (Conjunto de chaves e valores).
		
VARIÁVEIS
	Para declarar um variável existem três modos
		- var
			var a = 5;
		- let
			let c = 10;
		- const (Não permite que um novo valor seja atribuido a esta variável)
			const j = 0;
			ERROR APRESENTADO: Uncaught TypeError: Assigment to constant variable. at <anonymous>

FUNÇÕES
	Existem três maneiras de criar uma função
	- function teste(p1,p2){}
		function teste(parametro){
			console.log(parametro);
		}
		teste(´Isto vai ser impresso´);
	- const test = function(p1, p2){}
		const teste2 = function(parametro){
			console.log(parametro);
		}
		teste2(´Impresso na segunda função´);
	- const test = (p1, p2) => {}    //arrow functions, se tiver apenas um parametronão será necessario colocar parentese
		const teste3 = parametro => console.log(parametro)
		teste3(´Testando o tipo de declaração de função mais moderna´)
		
CONDICIONAIS
	As 3 condicionais do JavaScript são: if e else, operador ternário e switch.

	- O if e else, é usado para condições simples.
		const simOuNao = true;
		if (simOuNao){
			console.log(´Sim´)
		}else{
			console.log(´Não´)
		}
	- O operador ternário é muito parecido com o if e else, mas permite escrever condições de forma mais simples e direta.
		console.log(simOuNao ? ´Sim´ : ´Não´);
	- O switch é usado para condições complicadas, onde há a presença de várias casos independentes.
		const letra = ´a´;
		switch (letra){
		case ´a´;
		case ´e´;
		case ´i´;
		case ´o´;
		case ´u´;
			console.log(´${letra} é uma vogal´);
			break;
		case ´b´; 
		case ´c´;
		case ´d´;
		case ´f´;
		case ´g´;
		case ´h´;
		case ´j´;
		case ´k´;
		case ´l´;
		case ´m´;
		case ´n´;
		case ´p´;
		case ´q´;
		case ´r´;
		case ´s´;
		case ´t´;
		case ´v´;
		case ´x´;
		case ´y´;
		case ´w´;
		case ´z´;
			console.log(´${letra} é uma consoante´);
			break;
		default:
			console.log(´${letra} não é uma letra, favor verificar novamente´);
			break;
		}

LAÇOS
	Repetem uma ação por um determinado numero de vezes
	- while (Desde que uma condição especificada seja verdadeira)
		while (a < 10){
			console.log(´valor de a: ${a}´);
			a = a + 1;
		}
	- do...while (Executa a função pelo menos uma vez antes de avaliar)
		let b = 0;
		do {
			console.log(´valor de b: ${b}´);
			b = b + 1;
		} while (b <10);
	- for (Será repetido até que uma condição especifica seja falsa)
		for (let c = 0; c < 10; c = c + 1){
			console.log(´valor de c: ${c}´);
		}
	- for...in (percorre todas as propriedades de um objeto)
		const pessoa = { nome: ´Luis´, idade: 30};
		for (let chave in pessoa){
			console.log(´${chave}´)
		}
	- for...of (Percorre todos os itens de uma listaL)
		const nomes = ["Luís", "João", "Maria"];
		for (let nome of nomes){
			console.log(nome);
		}

ESCORPO
	O escopo é o contexto onde certas variáveis e expressões estão
acessíveis dentro de uma área do código. Há três tipos de escopo
no JavaScript:

	- Escopo global: acessível em todas as partes do código no arquivo JS.
	- Escopo de função: é acessível apenas dentro da função onde aquela variável foi declarada.
	- Escopo de bloco: é acessível apenas dentro do bloco onde aquela variável foi declarada.
		{
			console.log(variavelGlobal);
			const variavelDeBloco = 3;
			console.log(variavelDeBloco);
		}

TRATAMENTO DE ERROS (TRY, CATCH e FINALLY)
	Tratamento de erros – Se um erro é lançado sem ser tratado, a
engine para a execução do seu código e o programa fica travado. Para que isso não ocorra, é necessário tratar o erro. Para isso, são
utilizados três operadores:

	- try – um bloco onde o código é executado até que ocorra um erro. Caso haja um erro, a execução do bloco try e o erro é redirecionado ao bloco catch.
	- catch – um bloco que é executado ao receber um erro do bloco try. Caso não ocorra erro, o catch não é executado.
	- finally – um bloco final que sempre é executado, independente de um erro ter sido lançado ou não.
	