TIPOS DE DADOS: BOOLEAN, NUMBER, UNDEFINED E NULL, object.

	O JavaScript tem 7 tipos de dados, 6 deles são primitivos(Sem propriedades) e tem o object.
		- Boolean 
		- Number 
		- String (Pode ser escrita entre 'aspas simples', ´aspas´ e `backticks`)
			Interpolação de string permite colocar uma variavel dentro do backticks
				var teste = 1;
				console.log(typeof `backticks ${teste}`);
		- Undefined (Quando não há atribuição de valores).
		- Null (Tem valor atribuído, mas esse valor é vazio).
		- Symbol (Utilizado para fazer algumas operações em objetos).
		- object (Conjunto de chaves e valores).
		
VARIÁVEIS
	Para declarar um variável existem três modos
		- var
			var a = 5;
		- let
			let c = 10;
		- const (Não permite que um novo valor seja atribuido a esta variável)
			const j = 0;
			ERROR APRESENTADO: Uncaught TypeError: Assigment to constant variable. at <anonymous>

FUNÇÕES
	Existem três maneiras de criar uma função
	- function teste(p1,p2){}
		function teste(parametro){
			console.log(parametro);
		}
		teste(´Isto vai ser impresso´);
	- const test = function(p1, p2){}
		const teste2 = function(parametro){
			console.log(parametro);
		}
		teste2(´Impresso na segunda função´);
	- const test = (p1, p2) => {}    //arrow functions, se tiver apenas um parametronão será necessario colocar parentese
		const teste3 = parametro => console.log(parametro)
		teste3(´Testando o tipo de declaração de função mais moderna´)
		
CONDICIONAIS
	As 3 condicionais do JavaScript são: if e else, operador ternário e switch.

	- O if e else, é usado para condições simples.
		const simOuNao = true;
		if (simOuNao){
			console.log(´Sim´)
		}else{
			console.log(´Não´)
		}
	- O operador ternário é muito parecido com o if e else, mas permite escrever condições de forma mais simples e direta.
		console.log(simOuNao ? ´Sim´ : ´Não´);
	- O switch é usado para condições complicadas, onde há a presença de várias casos independentes.
		const letra = ´a´;
		switch (letra){
		case ´a´;
		case ´e´;
		case ´i´;
		case ´o´;
		case ´u´;
			console.log(´${letra} é uma vogal´);
			break;
		case ´b´; 
		case ´c´;
		case ´d´;
		case ´f´;
		case ´g´;
		case ´h´;
		case ´j´;
		case ´k´;
		case ´l´;
		case ´m´;
		case ´n´;
		case ´p´;
		case ´q´;
		case ´r´;
		case ´s´;
		case ´t´;
		case ´v´;
		case ´x´;
		case ´y´;
		case ´w´;
		case ´z´;
			console.log(´${letra} é uma consoante´);
			break;
		default:
			console.log(´${letra} não é uma letra, favor verificar novamente´);
			break;
		}

LAÇOS
	Repetem uma ação por um determinado numero de vezes
	- while (Desde que uma condição especificada seja verdadeira)
		while (a < 10){
			console.log(´valor de a: ${a}´);
			a = a + 1;
		}
	- do...while (Executa a função pelo menos uma vez antes de avaliar)
		let b = 0;
		do {
			console.log(´valor de b: ${b}´);
			b = b + 1;
		} while (b <10);
	- for (Será repetido até que uma condição especifica seja falsa)
		for (let c = 0; c < 10; c = c + 1){
			console.log(´valor de c: ${c}´);
		}
	- for...in (percorre todas as propriedades de um objeto)
		const pessoa = { nome: ´Luis´, idade: 30};
		for (let chave in pessoa){
			console.log(´${chave}´)
		}
	- for...of (Percorre todos os itens de uma listaL)
		const nomes = ["Luís", "João", "Maria"];
		for (let nome of nomes){
			console.log(nome);
		}

ESCORPO
	O escopo é o contexto onde certas variáveis e expressões estão
acessíveis dentro de uma área do código. Há três tipos de escopo
no JavaScript:

	- Escopo global: acessível em todas as partes do código no arquivo JS.
	- Escopo de função: é acessível apenas dentro da função onde aquela variável foi declarada.
	- Escopo de bloco: é acessível apenas dentro do bloco onde aquela variável foi declarada.
		{
			console.log(variavelGlobal);
			const variavelDeBloco = 3;
			console.log(variavelDeBloco);
		}

TRATAMENTO DE ERROS (TRY, CATCH e FINALLY)
	Tratamento de erros – Se um erro é lançado sem ser tratado, a engine para a execução do seu código e o programa fica travado. Para que isso não ocorra, é necessário tratar o erro. Para isso, são utilizados três operadores:

	- try – um bloco onde o código é executado até que ocorra um erro. Caso haja um erro, a execução do bloco try e o erro é redirecionado ao bloco catch.
	- catch – um bloco que é executado ao receber um erro do bloco try. Caso não ocorra erro, o catch não é executado.
	- finally – um bloco final que sempre é executado, independente de um erro ter sido lançado ou não.

ADIÇÃO E SUBTRAÇÃO
	Operadores de adição e subtração:
	Os operadores + e - te permitem somar ou subtrair dois números ou variáveis normalmente. Em JavaScript, podem ser somados ou subtraídos números inteiros e decimais sem problemas.
	O operador += permite incrementar uma variável de um número especificado e o operador -= permite decrementar uma variável de um número especificado. Também temos os operadores ++, que soma 1 à
	variável, e --, que subtrai 1 da variável.

MULTIPLICAÇÃO, DIVISAO E MÓDULO
	O operador * é utilizado para multiplicação, o operador / é utilizado para divisão e o operador % é usado para o módulo de dois números. Em programação, módulo é a operação que obtém o resto da divisão entre dois números.

COMPARAÇÃO DE VALORES 
	Operadores de comparação:
	Igual a (independente do tipo): ==
	Igual a (dependente do tipo): ===
	Diferente de (independente do tipo): !=
	Diferente de (dependente do tipo): !==

	Maior que: >
	Maior ou igual a: >=
	Menor que: <
	Menor ou igual a: <=

TIPOS DE VALOR E TIPOS DE referência
	- Tipo de valor: quando você passa uma cópia do valor de certa variável para a função. O valor dentro da variável original que foi enviada não é alterado mesmo após a execução da função.
	- Tipo de referência: quando você passa a referência do objeto para uma função. As alterações feitas à objeto nessa função também ocorrem com o objeto fora dela.

OBJETOS 
	- como definir um objeto:
		const pessoa = {nome: "Luís", idade: 30};
		console.log(pessoa);
	- Retorna uma lista com as propriedades do seu objeto
		console.log(Object.keys(pessoa));
	- Retorna os valores dos objetos
		console.log(Object.values(pessoa));
	- Retorna uma lista com dois itens (a propriedade e o valor)
		console.log(Object.entries(pessoa));
	- Operador spread cópia as propriedades de um objeto
		const p = {...pessoa}
	- Criar objetos com variáveis
		const nome = "Rose"
		const pessoa3 = {nome};
		console.log(pesssoa3)

ARRAYS
	Array: uma lista de valores de qualquer tipo
	- Declarando um array
		const umArray = [1,2,3,4,5];
	- Métodos de Array
		- filter: Filtra um array baseado numa expressão matemática.
					const arrayFilter = umArray.filter(n => n < 3);
		- forEach: Faz uma iteração sobre todos os elementos do array e te devolve como o parâmetro de uma função.
					umArray.forEach(n => console.log(n));
		- map: Faz uma iteração sobre todos os elementos do array e te retorna um novo vetor.
					const arrayMap = umArray.map(n => `Número ${n}`);
					console.log(arrayMap);
		- reduce: Reduz todos os valores do array para um único valor.
					const arrayReduce = umArray.reduce(
					(acumulador, valorAtual) => {
					console.log({ acumulador, valorAtual });
					return acumulador + valorAtual;
					});					
					console.log(arrayReduce);
		- Operador spread: Pode ser usado para formar novos vetores a partir de outros vetores.
					const par = [2,4];
					const impar = [1,3];
					const resultado = [...par, ...impar];
					console.log(resultado);

DESESTRUTURAÇÃO DE OBJETOS E ARRAYS
	- Desestruturação de objetos: Permite formar novas variáveis usando propriedades de objetos.
		const pessoa = { nome: ‘Luís’, idade: 30 };
		const { nome } = pessoa;
		console.log(outroNome);
	- Desestruturação de array: Permite formar novas variáveis usando elementos de um array.
		const letras = [‘a’, ‘b’, ‘c’, ‘d’];
		const [um, dois] = letras;
		console.log(um);
		console.log(dois);

DATE
	Objeto Date – usado para trabalhar com datas no JavaScript. É possível criar uma data baseada no momento atual ou até fazer novas datas baseadas num tempo de seu interesse.
	- Mostrar data atual
		const agora = new Date();
	- Métodos:
		getFullYear(): retorna o ano atual no formato AAAA.
		getMonth(): retorna o mês atual representado de 0 (Janeiro) a 11 (Dezembro).
		getDate(): retorna o dia atual.
		getHours(): retorna a hora atual.
		getMinutes(): retorna os minutos atuais.
		getSeconds(): retorna os segundos atuais.
		getMiliseconds(): retorna os milissegundos atuais.
		getTime(): retorna o epoch time (a quantidade de segundos passados desde a meia-noite do dia 1 de janeiro de 1970.
		getDay(): retorna o dia da semana.
		setDate(): seleciona um novo dia para o objeto Date.

EXPRESSÕES REGULARES
	- Expressões regulares são padrões utilizados para selecionar combinações de caracteres em uma string.
		const regex = [A-Z/ig];
		const regex2 = new RegExp('[A-Z]', 'ig');
	- Os quatro principais métodos para trabalhar com expressões regulares no JavaScript são:
		exec: retorna o primeiro resultado que satisfaz a sua expressão regular
		test: retorna um resultado verdadeiro ou falso que diz se existe uma string que satisfaz aquela expressão
		match: retorna todas as strings que satisfazem a expressão regular
		replace: substitui os valores que satisfazem a expressão regular com um novo valor

A PALAVRA RESERVADA THIS
	A palavra reservada ““this”” retorna um objeto que depende do contexto onde é invocada.
	Ao ser chamada dentro de uma função normal, será retornado um objeto dependente do escopo daquela função. Ao ser chamada dentro de uma arrow function, será retorna um objeto do escopo acima de onde a função está sendo executada.
		let pessoa = {
			nome: 'Luís',
			thisComFuncao: function(){
				console.log(this);
				console.log(this !== window);
			},
			thisComArrowFunction:() =>{
				console.log(this);
				console.log(this === window);
			}
		};

		pessoa.thisComFuncao();
		pessoa.thisComFuncao();

PARÂMETROS OPCIONAIS
	Parâmetros opcionais são parâmetros de funções ou objetos que já têm valores padrões pré-definidos e que não precisam ser especificados ao invocar aquela função ou objeto.
		const multiplique = (n1 = 1, n2 = 1) => n1 * n2

PARÂMETROS REST 
	Parâmetros rest são usados para indicar um número indefinido de parâmetros que podem ser utilizados ao chamar um método. São declarados introduzindo um três pontos (…) antes do nome do parâmetro.
		const comRest = (a, b, …extraArgs) => { console.log(extraArgs); }

CRIANDO E UTILIZANDO CLASSES
	A orientação à objetos permite ao programador criar classes, que, depois, podem ser instanciadas em objetos. Para criar uma classe em JavaScript, utiliza-se a palavra reservada class.
	Muitas classes precisam de um construtor, que é um método que é executado assim que um novo objeto daquela classe é instanciado. Esse método pode receber parâmetros e é bastante útil para atribuir características ao objeto, logo no momento da criação dele.
		class Pessoa{
			constructor(nome, idade){
				console.log("Criando uma objeto do tipo Pessoa");
				console.log(nome, idade);
			}
		}
		const p = new Pessoa("Rose", 22);

DECLARANDO PROPRIEDADE E MÉTODOS 
	Agora que sabemos declarar classes, veremos como adicionar propriedades, comportamentos ou métodos a ela. As propriedades funcionam como variáveis que ficam atreladas a um objeto que faz parte daquela classe, elas podem ser declaradas, dentro do construtor, fazendo: this.variavel = 10;
	Os métodos são como funções normais que ficam dentro do bloco da classe, mas não levam a palavra reservada function. Eles podem ser usados para manipular os parâmetros do objeto, além de executar um conjunto de instruções relevantes para aquela classe.
		class Pessoa{
			constructor(nome, idade){
				this.nome = nome;
				this.idade = idade;
			}
			teste(){
				console.log(this);
			}
		}
		const p = new Pessoa("Rose", 22);
		console.log(p);
		p.teste();

PROPRIEDADE E MÉTODOS ESTÁTICOS
	class Pessoa{
		static teste(){
			console.log(this);
		}
	}
	Pessoa.teste();

HERANÇA
	Herança é um conceito de orientação a objetos que permite a uma classe herdar as propriedades e métodos de outra classe.
	A palavra-chave extends indica que uma classe é estendida, ou seja, herda, os métodos e propriedades de outra classe. Para acessar o construtor ou características da classe mãe, pode ser usada a palavra reservada super.
		class Pessoa{
			constructor(tipo){
				this.tipo = tipo;
			}
			getTipo(){
				return this.tipo;
			}
		}

		class Usuario extends Pessoa{
			constructor(){
				super('usuário');
			}
		}
		class Administrador extends Pessoa{
			constructor(){
				super('admin');
			}
		}

		var u - new Usuario();
		console.log(u.getTipo());

		var u - new Administrador();
		console.log(u.getTipo());

DOM (DOCUMENT OBJECT MODEL) E BOM (BROWSER OBJECT MODEL)
	- DOM, Document Object Model, é como interagimos com a página HTML. É a forma como manipulamos botões e caixas de texto, por exemplo. Para instanciar elementos que foram declaramos na página HTML, usamos os seguintes métodos do JavaScript:
		document.getElementById() - retorna um objeto pertencente ao elemento que tem o ID determinado.
		divAula.classList.remove('hide');
		.value //retorna o valor do objeto
		document.getElementByClassName() - retorna uma lista de objetos que têm a classe determinada.
		.length //retorna a quantidade de vezes que aquela classe aparece
		document.getElementByTagName() - retorna uma lista de objetos com aquela tag.

	- BOM, Browser Object Model, é como interagimos com o navegador. Usado para pedir permissões para enviar notificações, consultar a URL atual, verificar as dimensões da janela ou a geolocalização do usuário. Alguns métodos para interagir com o BOM são:
		console.log() - imprime algum texto no console.
		console.warn() - imprime um aviso no console indicando a localização do aviso no código.
		console.error() - imprime um erro no console indicando a localização do erro no código.
		alert(’’) - mostra um pop-up na tela com uma mensagem de alerta.
		prompt() - mostra uma pop-up com uma caixa de texta para entrada de dados.

 O QUE É UM EVENTO?
	Eventos são acionados por mudanças de estado na página, por exemplo: quando a página é carregado (evento de load), quando a janela do navegador é redimensionada (evento de resize), quando a página é deslizada (evento de scroll), etc.

REAGINDO A EVENTOS 
	Para executar alguma ação quando um evento é disparado, utiliza-se o método addEventListener, que fica “ouvindo” se certo evento é executado, com uma arrow function como segundo parâmetro.
	O método addEventListener pode ser usado em diversos elementos da página, o que é útil para saber se o evento foi acionado por uma mudança de estado na janela, num botão, numa caixa de texto ou outro elemento da página.
		const botao = document.getElementById(‘botao’);
		botao.addEventListener('click’, () => {
		console.log('botão clicado’);
		});

PROPAGAÇÃO DE EVENTOS
	A propagação de erros ocorre quando mais de um elemento são acionados por uma única ação. Por exemplo, ao clicar em certa parte da tela, tanto o elemento que foi clicado e o elemento-pai em que o primeiro está contido respondem ao evento.
	Para evitar problemas com a propagação de erro, deve-se adicionar o método stopPropagation() dentro dos elementos mais internos de forma a impedir que os elementos-pais reajam ao evento.

CALLBACKS
	No JavaScript há apenas uma thread principal, por isso o código não pode conter ações que demorem muito tempo, pois isso travaria a execução do programa. Para contornar este problema, é utilizada a programação assíncrona que permite executar partes do código fora da thread principal evitando que esta fique bloqueada.
	- Existem 3 formas de usar programação assíncrona no JavaScript: callbacks, promises e async e await. O jeito mais tradicional é usar o callback, que é feito usando uma arrow function dentro do método setTimeout().
    Executa o callback dentro de 1 segundo (1000 milissegundos) */
		setTimeout(() => {
				console.log('O callback foi executado');
		}, 1000);
		const operacaoDemorada = (callback) => {
			console.log("começando operação");
			setTimeout(() =>{
				console.log("Finalizando operação");
				callback({nome: "Luís"});
			}, 1500);	
		};
		operacaoDemorada((pessoa) => {
			console.log(pessoa);
		});

PROMISES
	Promise é um objeto que representa o sucesso ou a falha de uma operação assíncrona. Ele precisa de dois parâmetros: o resolve, que executa em caso de sucesso, e o reject, que lança um erro em caso de falha.
		const operacaoDemorada = (callback) => {
		console.log(‘começando a operação’);
		return new Promise((resolve, reject) => {
		setTimeout( () => {
		console.log(‘finalizando…’);
		resolve({ nome: ‘Luís’ });
		/* reject(new Error(‘ops’)); */
		}, 1500);
		});
		};
		operacaoDemorada().then(pessoa) => {
			console.log(pessoa);
		});

		.catch((erro) =>{
			console.log(erro.message);
		})

ASYNC E AWAIT 
	O async e await é uma sintaxe especial que te permite trabalhar com promises de forma mais sequencial e confortável, permitindo inclusive pôr trechos de código de programação assíncrono dentro de blocos try/catch.
		const operacaoDemorada = (callback) => {
		console.log(‘começando a operação’);
		return new Promise((resolve, reject) => {
		setTimeout( () => {
		console.log(‘finalizando…’);
		resolve({ nome: ‘Luís’ });
		/* reject(new Error(‘ops’)); */
		}, 1500);
		});
		};

    const rodeApp = async () => {
		const pessoa = await operacaoDemorada();
		console.log(pessoa);
   		 };
		rodeApp();
	O async e await é também muito utilizado para fazer requisições HTTP.
		const busqueUsuario = async () => {
		const result = await fetch(‘https://reqres.in/api/users/2’);
		const dados = await result.json();
		console.log(dados);
		};